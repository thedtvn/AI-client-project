---
import Layout from "../layouts/main_page.astro";
import AiBall from "../components/ai_ball.astro";
import ResizeInput from "../components/resize_input.astro";
import SendButton from "../components/send_btn.astro";
---

<Layout>
	<link
		rel="stylesheet"
		href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.6.1/github-markdown-dark.css"
	/>
	<div id="main_chat_root">
		<AiBall />
		<div id="chat_box">
			<div id="chat_container">
				<div id="main_chat"></div>
			</div>
		</div>
		<div id="input_root">
			<ResizeInput />
			<SendButton />
		</div>
	</div>
	<script>
		import "../components/chat_mess";
		import { listen } from "@tauri-apps/api/event";
		import { invoke } from "@tauri-apps/api/tauri";
		let message_map = {};

		function init_new_message() {
			let bot = document.createElement("chat-message");
			main_chat.appendChild(bot);
			return bot;
		}
		
		let old_messages = await invoke("get_messages", {});
		for (let i of old_messages) {
			let mess = init_new_message();
			mess.init(i.content, i.is_user);
			let id = await invoke("generate_uuid", {});
			message_map[id] = mess;
		}
		chat_container.scrollTop = chat_container.scrollHeight;

		listen("message", (event) => {
			let mid = event.payload.uuid;
			let data = event.payload.data;
			if (!(mid in message_map)) {
				message_map[mid] = init_new_message();
			}
			message_map[mid].init(data, false);
			chat_container.scrollTop = chat_container.scrollHeight;
		});

		send.addEventListener("click", async () => {
			if (!input.value) return;
			send.disabled = true;
			let user_message = init_new_message();
			user_message.init(input.value, true);
			chat_container.scrollTop = chat_container.scrollHeight;
			let bot_message = init_new_message();
			let id = await invoke("generate_uuid", {});
			bot_message.load();
			let content = input.value;
			input.value = "";
			message_map[id] = bot_message;
			chat_container.scrollTop = chat_container.scrollHeight;
			try {
				await invoke("new_message", { prompt: content, id });
			} catch (error) {}
			send.disabled = false;
		});
	</script>
	<style is:global>
		/* user to bypass the markdown css */
		.message {
			width: 80% !important;
			background-color: rgba(80, 80, 80, 0.584) !important;
			height: auto;
			margin-top: 10px !important;
			margin-bottom: 10px !important;
			border-radius: 5px !important;
			padding: 5px !important;
		}

		.loader {
			width: 50px;
			aspect-ratio: 2;
			--_g: no-repeat
				radial-gradient(circle closest-side, #f1f1f1 90%, #00000000);
			background:
				var(--_g) 0% 50%,
				var(--_g) 50% 50%,
				var(--_g) 100% 50%;
			background-size: calc(100% / 3) 50%;
			animation: l3 1s infinite linear;
		}
		@keyframes l3 {
			20% {
				background-position:
					0% 0%,
					50% 50%,
					100% 50%;
			}
			40% {
				background-position:
					0% 100%,
					50% 0%,
					100% 50%;
			}
			60% {
				background-position:
					0% 50%,
					50% 100%,
					100% 0%;
			}
			80% {
				background-position:
					0% 50%,
					50% 50%,
					100% 100%;
			}
		}
	</style>
	<style>
		#main_chat {
			bottom: 0%;
			margin: 10px;
			margin-top: 20px;
			max-width: 100%;
			overflow-x: hidden;
			display: flex;
			flex-direction: column;
			justify-content: end;
		}

		#input_root {
			display: flex;
			margin: 10px;
			justify-content: center;
			align-items: center;
		}

		#chat_container {
			height: fit-content;
			max-height: calc(100% - 20px);
			overflow-y: auto;
			top: 50%;
		}
		#chat_box {
			height: calc(90% - (75px + 20px));
			max-height: 90%;
			display: flex;
			flex-direction: column;
			justify-content: flex-end;
		}
		#main_chat_root {
			height: 100%;
			width: 100%;
			gap: 10px;
			display: flex;
			flex-direction: column;
			justify-content: space-between;
		}
	</style>
</Layout>
